///////////////////////////////////////////
// Paramètres à renseigner manuellement //
/////////////////////////////////////////

const rain_density = 1; // Nombre de gouttes par frame
const rain_len_min = 10; // Longueur minimale des gouttes
const rain_len_rand = 10; // Longueur variable des gouttes
const rain_width_rand = 2; // Largeur variable des gouttes
const rain_speed_min = 8; // Vitesse minimale des gouttes
const rain_speed_rand = 3; // vitesse variable des gouttes
const angle_goutte = 3*Math.PI/8; // angle initiale des gouttes

const rain_eclaboussure_min = 5;
const rain_eclaboussure_rand = 5;

const gravity = .5; // Vitesse a laquelle les eclaboussures retombent

////////////////////////////////////////////////
// Initialisation des paramètres automatique //
//////////////////////////////////////////////

let init = true;
let liste_lampadaire = [];
let cote_rand; // Sert à choisir aléatoirement si une goutte apparait soit sur le coté, soit sur le haut
let rain_drop_start_theorique; // à partir de quelle hauteur la goutte peut apparaitre

// Si l'angle d'apparition des gouttes est supérieur à PI/2, alors le calcul n'est pas le même. Variable intermédiaire servant à alléger les fonctions en supprimant des if inutiles
let angle_goutte_calcul; 

if (angle_goutte > Math.PI / 2){
  angle_goutte_calcul = Math.PI/2-angle_goutte;
} else {
  angle_goutte_calcul = angle_goutte;
}

let y_first_drop = 0; // 

let RainDropsClean = [];
let compteur_clean = 0;
let RainDrops = [];

let tot = 0;
let distrib = 0;

let particles = [];
function setup() {
  createCanvas(500, 500);

  noStroke();
  frameRate(68);

  let wind_of_change = createVector(1,0);
  
}

function draw() {
  background(50);

  if (init){
    liste_lampadaire.push(new Lampadaire(width/2,height-60,0.5));
    init = false;
  }

  liste_lampadaire.forEach((p) => {
    p.draw();
  });

  addDrop(rain_density);

  for (let i = 0; i < RainDrops.length - 1; i++) {
    let drop = RainDrops[i];
    if (drop.y > y_first_drop & y_first_drop <height) {y_first_drop = drop.y};
    if (drop.sol >= height){drop.eclaboussure()};
    if (drop.x > width || drop.y > height || drop.x < 0){drop.isAlive = false};
  drop.draw();
}

RainDrops = RainDrops.filter((p) => p.isAlive);

particles.forEach((p) => {
  p.step();
  p.draw();
});
particles = particles.filter((p) => p.isAlive);

liste_lampadaire.forEach((p) => {
  p.halo.draw();
});
}

// function addDrop(amount) {
//   for (let i = 0; i < amount; i++) {
//     let random_number = random(width + y_first_drop);
//     if (random_number < y_first_drop){
//       cote_rand = 0;
//     } else {
//       cote_rand = PI/2;
//     }
//     let newDrop = new RainDrop(sin(cote_rand)*(random(random_number)), cos(cote_rand)*(random(y_first_drop)));
//     RainDrops.push(newDrop);
//   }
// }

function addDrop(amount) {
  if (angle_goutte == Math.PI/2){
    rain_drop_start_theorique = 0;
  } else {
    rain_drop_start_theorique = y_first_drop/cos(angle_goutte_calcul);
  }

  for (let i = 0; i < amount; i++) {
    let random_number = random(width + rain_drop_start_theorique);
    if (random_number < width){
      cote_rand = 0;
      // console.log(cos(cote_rand)*floor(angle_goutte/(Math.PI/2))*width + sin(cote_rand)*random(width));
    } else {
      cote_rand = PI/2;
    }
    let newDrop = new RainDrop(
      cos(cote_rand)*floor(angle_goutte/(Math.PI/2))*width + sin(cote_rand)*random(width),
      cos(cote_rand)*random(y_first_drop));
    RainDrops.push(newDrop);
    
  }
}
 
class RainDrop {
  constructor(x, y) {
    this.x = x;
    this.y = y;
    this.speed = rain_speed_min + random(rain_speed_rand);
    this.width = random(rain_width_rand);
    this.length_max = rain_len_min+random(rain_len_rand);
    this.length = 1;
    this.angle = angle_goutte;
    this.sol = 0;
    this.isAlive = true;
  }

  draw() {
    push;
    stroke("white");
    strokeWeight(this.width);
    let r = min(this.length_max,this.length);
    line(this.x,this.y,this.x + r*cos(this.angle),this.y + r*sin(this.angle));
    pop;

    if(this.length < this.length_max){
      this.length += this.speed;
    } else {
      this.x += this.speed*cos(this.angle);
      this.y += this.speed*sin(this.angle);
    }

    if (this.angle > PI/2){
      this.sol = this.y + cos(this.angle - PI/2)*this.length;
    } else {
      this.sol = this.y + sin(this.angle)*this.length;
    }
  }



  wind(wind_force){
    this.x = (wind_force.x/this.length_max) + this.x;
    this.y = (wind_force.y/this.length_max) + this.y;
  }

  eclaboussure(){
  let n = rain_eclaboussure_min + floor(random(rain_eclaboussure_rand));

  for (let i = 0; i < n; i++) {

    const angle = random(PI,TWO_PI);
    const xSpeed = cos(angle) * this.speed;
    const ySpeed = sin(angle) * this.speed;
    const size = this.width;

    particles.push(new Particle(this.x, this.y,
      xSpeed, ySpeed, size
      ));
    }
    this.isAlive = false;
  }

}

class Particle {
	constructor(x, y, xSpeed, ySpeed, size) {
		this.x = x;
		this.y = y;
		this.xSpeed = xSpeed;
		this.ySpeed = ySpeed;
		this.size = size;
		this.isAlive = true;
	}

	step() {
		this.x += this.xSpeed;
		this.y += this.ySpeed;

		this.ySpeed += gravity;

		if (this.y > height) {
			this.isAlive = false;
		}
	}

	draw() {
		fill("white");
		noStroke();
		rect(this.x, this.y, this.size, this.size);

	}
}

class Lampadaire{

  constructor(x, y, échelle) {
		this.x = x;
		this.y = y;
		this.échelle = échelle;

		this.couleur_base = '#202020';
		this.couleur_tronc = '#006400';
		this.couleur_lampe = '#FFD700';
    

    this.hauteur_base = 10*this.échelle;
		this.largeur_base = 50*this.échelle;

		this.hauteur_base_tronc = 100*this.échelle;
		this.hauteur_tronc = 280*this.échelle;
    this.largeur_tronc = 20*this.échelle;

		this.rayon_boule = 70*this.échelle;
		this.angle_base_boule = Math.PI/5;

    this.halo = new Halo((this.x),(this.y - this.hauteur_base*2.5 - this.hauteur_base_tronc - this.hauteur_tronc - this.rayon_boule/2),this.couleur_lampe);
	}

  draw(){
    push()
    noStroke();
    translate(this.x,this.y);

    // 1er étage (hauteur = hauteur_base)
    translate(0,-this.hauteur_base);
    fill(this.couleur_base);
    rect(-this.largeur_base/2,0,this.largeur_base,this.hauteur_base);
    arc(this.largeur_base/2,this.hauteur_base,this.hauteur_base*2,this.hauteur_base*2,-HALF_PI,0);
    arc(-this.largeur_base/2,this.hauteur_base,this.hauteur_base*2,this.hauteur_base*2,PI,-HALF_PI);

    // 2ème étage (hauteur = hauteur_base_tronc)
    translate(0,-this.hauteur_base_tronc);
    fill(this.couleur_tronc);
    rect(-this.largeur_base/2, 0,this.largeur_base,this.hauteur_base_tronc);

    // 3ème étage (hauteur = hauteur_base)
    translate(0,-this.hauteur_base);
    fill(this.couleur_base);
    rect(-this.largeur_base/2,0,this.largeur_base,this.hauteur_base);
    arc(this.largeur_base/2,this.hauteur_base/2,this.hauteur_base,this.hauteur_base,-HALF_PI,HALF_PI);
    arc(-this.largeur_base/2,this.hauteur_base/2,this.hauteur_base,this.hauteur_base,HALF_PI,-HALF_PI);

    // 4ème étage (hauteur = hauteur_base/2)
    translate(0,-this.hauteur_base/2);
    fill(this.couleur_base);
    rect(-this.largeur_tronc/2,0,this.largeur_tronc,this.hauteur_base/2);
    arc(this.largeur_tronc/2,this.hauteur_base/2,this.hauteur_base,this.hauteur_base,-HALF_PI,0);
    arc(-this.largeur_tronc/2,this.hauteur_base/2,this.hauteur_base,this.hauteur_base,PI,-HALF_PI);

    // 5ème étage (hauteur = hauteur_tronc)
    translate(0,-this.hauteur_tronc);
    fill(this.couleur_tronc);
    rect(-this.largeur_tronc/2,0,this.largeur_tronc,this.hauteur_tronc);

    // 6ème étage (hauteur = hauteur_base/2)
    translate(0,-this.hauteur_base/2);
    fill(this.couleur_base);
    rect(-this.largeur_tronc/2,0,this.largeur_tronc,this.hauteur_base/2);
    arc(this.largeur_tronc/2,this.hauteur_base/4,this.hauteur_base/2,this.hauteur_base/2,-HALF_PI,HALF_PI);
    arc(-this.largeur_tronc/2,this.hauteur_base/4,this.hauteur_base/2,this.hauteur_base/2,HALF_PI,-HALF_PI);
    
    // base boule (hauteur = en fonction de l'angle angle_base_boule)
    translate(0,this.hauteur_base/2 - this.rayon_boule/2);
    fill(this.couleur_base);
    arc(0,0,this.rayon_boule,this.rayon_boule,HALF_PI-this.angle_base_boule,HALF_PI+this.angle_base_boule,CHORD);

    // boule (hauteur = en fonction de l'angle angle_base_boule)
    fill(this.couleur_lampe);
    arc(0,0,this.rayon_boule,this.rayon_boule,HALF_PI+this.angle_base_boule,HALF_PI-this.angle_base_boule,CHORD);

    // Centre lumière
    // fill("green");
    // arc(0,0,rayon_boule/4,rayon_boule/4,0,TWO_PI);

    
    pop();
    // Ajout du halo
    // this.halo.draw();
  }
}

class Halo {
  constructor(x, y,color) {
    this.x = x;
    this.y = y;
    this.color = color;
    this.rayon_halo_min = 100;
    this.rayon_halo_max = 105;
    this.intensite_halo = 4;
    this.rayon_halo = this.rayon_halo_min;
    this.isGrowing = true;
    this.temps_evolution_halo = 1; // temps en seconde
    this.vitesse_evolution_halo = (this.rayon_halo_max - this.rayon_halo_min)/(this.temps_evolution_halo*frameRate());
  }

  draw() { 
    push();
    let c = color(this.color);
    c.setAlpha(this.intensite_halo);
    fill(c);
    noStroke();
    blendMode(ADD);
    for (let r = 0.0; r < 0.5; r += 0.01) {
      circle(this.x, this.y, this.rayon_halo *4*r);
    }
    pop();

    if(this.rayon_halo > this.rayon_halo_max){
      this.isGrowing = false;
    }
    else if(this.rayon_halo < this.rayon_halo_min){
      this.isGrowing = true;
    }

    if(this.isGrowing){
      this.rayon_halo += this.vitesse_evolution_halo;
    } else {
      this.rayon_halo -= this.vitesse_evolution_halo;
    }
  }
}